{
    "collab_server" : "",
    "contents" : "# take a look at downloaded L8 images\n\nlibrary(raster)\nlibrary(rgdal)\nlibrary(gdalUtils)\nlibrary(downscaleRS)\nlibrary(mapview)\n\ndatapath <-\"E:/L8_MDV/get_data/LANDSAT/L1/\"\nscriptpath <- \"C:/Users/mleza/Documents/PhD/work_packages/auto_downscaling_30m/downscale_controlscripts/\"\nscenedir <- list.files(datapath)\nscenes <- paste0(datapath, scenedir, \"/\")\nsource(paste0(scriptpath, \"read_meta_L8_PS.R\"))\n\n# get and project area of interest\nl8proj <- crs(\"+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m\n+no_defs +ellps=WGS84 +towgs84=0,0,0\")\naoipath <- \"C:/Users/mleza/Documents/PhD/work_packages/auto_downscaling_30m/data/aoi_MDV/\"\naoi <- readOGR(list.files(aoipath, pattern=\".shp\", full.names = T))\naoi <- spTransform(aoi, l8proj)\n\n# function for locating tifs and metadata as well as generating filenames \n# for all downloaded scenes\n\n# summarize all available scenes\ndatloc <- l8datlist(scenes)\n\nmetaData <- lapply(seq(datloc$meta), function(i){\n  readMeta(datloc$meta[[i]], raw=T)\n})\nlsat8 <- lapply(seq(datloc$meta), function(i){\n  stackMeta(datloc$meta[[i]], quantity = 'all')\n})\n  \n\n# CHECK WHICH SCENES GO TOGETHER\n#  Landsat data acquisition times are expressed in Greenwich Mean Time (GMT) standard.\npathrow <- lapply(seq(metaData), function(i){\n  path <- metaData[[i]]$PRODUCT_METADATA[rownames(metaData[[i]]$PRODUCT_METADATA) == \"WRS_PATH\",]\n  row <- metaData[[i]]$PRODUCT_METADATA[rownames(metaData[[i]]$PRODUCT_METADATA) == \"WRS_ROW\",]\n  date <- metaData[[i]]$PRODUCT_METADATA[rownames(metaData[[i]]$PRODUCT_METADATA) == \"DATE_ACQUIRED\",]\n  time <- metaData[[i]]$PRODUCT_METADATA[rownames(metaData[[i]]$PRODUCT_METADATA) == \"SCENE_CENTER_TIME\",]\n  return(list(path=path, row=row, date=date, time=time))\n})\n\n\ndf <- data.frame(matrix(unlist(pathrow), ncol = 4, byrow=T))\nnames(df) <- names(pathrow[[1]])\ndf$scenenumber <- as.numeric(rownames(df))\ndf\n\n# PATCH SCENES TOGETHER\n\n# find those with consequtive dates, that are not too far from each other\ndf <- df[order(as.Date(df$date, format=\"%Y-%m-%d\")),]\ndf$date <- as.Date(df$date, format=\"%Y-%m-%d\")\n\ndaydiff <- sapply(seq(nrow(df)-1), function(i){\n    df$date[i] - df$date[i+1]\n  })\ndd <- c(0, daydiff)\ndf$daydiff <- dd\ndf$cumdays <- cumsum(abs(df$daydiff))\n\n# take all scenes that are not more than 10 days apart\nnums <- df$scenenumber[df$cumdays < 10]\n\n\n# ordered by time: stacks\nscene1 <- lapply(seq(nums), function(i){\n  stackMeta(datloc$meta[[nums[i]]], quantity = 'all')\n})\n\n# good\ns1 <- scene1[c(2,3,5,6,7,8)]\nsc <- s1\n\nfor(i in seq(2)){\n  for(j in seq(nlayers(s1[[1]]))){\n    s1[[i]][[j]][s1[[i]][[j]]==0] <- NA\n  }\n}\n\n# run again tomorrow!\nmosaic <- merge(s1[[1]], s1[[2]], s1[[3]], s1[[4]], s1[[5]], s1[[6]],\n      tolerance=0.05, filename=\"testmosaic.tif\", overwrite=T, overlap=T, ext=NULL)\n\nwriteRaster(mosaic, \"E:/L8_MDV/mosaic/testmosaic.tif\", format=\"GTiff\", \n            overwrite=T, bylayer=T)\n\nmapview(mosaic[[1]])\n\nscene <- mosaic(s1[[1]], s1[[2]], s1[[3]], s1[[4]], s1[[5]], s1[[6]], \n                fun=max)\n\n# TO DO!\nac <- function(lsat8, aoi, metaData){\n  # cut out to research area\n  lsat8.aoi <- crop(lsat8, aoi)\n  lsat8.aoi <- mask(lsat8.aoi, aoi)\n  \n  # Calculation of TOA (Top of Atmospheric) spectral radiance.\n  # TOA (L) = ML * Qcal + AL\n  # ML = Band-specific multiplicative rescaling factor from the metadata (RADIANCE_MULT_BAND_x, where x is the band number).\n  # Qcal = corresponds to band 10.\n  # AL = Band-specific additive rescaling factor from the metadata (RADIANCE_ADD_BAND_x, where x is the band number).\n  \n  ML <- metaData$RADIOMETRIC_RESCALING[\"RADIANCE_MULT_BAND_10\",]\n  AL <- metaData$RADIOMETRIC_RESCALING[\"RADIANCE_ADD_BAND_10\",]\n  TOA = (ML * lsat8.aoi$B10_dn) + AL\n  \n  \n  # TOA to Brightness Temperature conversion\n  # BT = (K2 / (ln (K1 / L) + 1)) ??? 273.15\n  \n  # K1 = Band-specific thermal conversion constant from the metadata (K1_CONSTANT_BAND_x, where x is the thermal band number).\n  # K2 = Band-specific thermal conversion constant from the metadata (K2_CONSTANT_BAND_x, where x is the thermal band number).\n  # L = TOA\n  # Therefore, to obtain the results in Celsius, the radiant temperature is adjusted \n  # by adding the absolute zero (approx. -273.15?C).\n  \n  K1 <- metaData$TIRS_THERMAL_CONSTANTS[\"K1_CONSTANT_BAND_10\",]\n  K2 <- metaData$TIRS_THERMAL_CONSTANTS[\"K2_CONSTANT_BAND_10\",]\n  BTK <- (K2 /(log(K1 / TOA)))+1\n  BTC <- (BTK-273.15)\n  return(BTC)\n}\n\n\n\n# CALCULATE THE LANDCOVER PREDICTION\nlc <- \n  \n# TO DO!\nmakeL8LST <- function(BTC, lc, datapath){\n\n  # Calculate Emissivity\n  eta <- lc\n  eta[eta==2] <- 0.94 \n  eta[eta==1] <- 0.97\n  \n  # Calculate the Land Surface Temperature\n  LST <- (BTC/(1+(0.0010895*BTC/0.01438)*log(eta))) \n  \n  # ?? = 0.004 * Pv + 0.986\n  # use 0.9668 (Yu, Guo, Wu) as correction value for bare soil\n  emis <- 0.004*lsat8.PV+0.9668\n  \n  # Calculate the Land Surface Temperature\n  # LST = (BT / (1 + (0.00115 * BT / 1.4388) * Ln(??)))\n  LST <- (BTC/(1+(0.00115*BTC/1.4388)*log(emis))) \n  \n  \n  # write LST raster\n  writeRaster(LST, paste0(datapath, \"LST.tif\"), format=\"GTiff\")\n  \n}\n\n\n\n\n# WRITE ONE CHANNEL TO SEE HOW THEY FIT IN QGIS\n# blue <- lapply(seq(tifs), function(i){\n#   raster(tifs[[i]][4])\n# })\n# \n# bluepath <- \"E:/L8_MDV/blue/\"\n# \n# for(i in seq(blue)){\n#   writeRaster(blue[[i]], paste0(bluepath, names[[i]][4]), format=\"GTiff\", overwrite=T)\n# }\n\n\n# ATMOSPHERIC CORRECTION\n\n# IMAGE PATCHING\n\n\n# check for those of the same row, those are from the same day...",
    "created" : 1556784137809.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2017823542",
    "id" : "63A9A1AC",
    "lastKnownWriteTime" : 1556811629,
    "last_content_update" : 1556811629776,
    "path" : "~/PhD/work_packages/auto_downscaling_30m/downscale_controlscripts/2_check_L8_images_dev.R",
    "project_path" : "2_check_L8_images_dev.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
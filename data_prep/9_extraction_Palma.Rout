
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> y=1
> m=1
> 
> library(raster)
Loading required package: sp
> library(rgdal)
rgdal: version: 1.4-4, (SVN revision 833)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 3.0.0, released 2019/05/05
 Path to GDAL shared files: 
 GDAL binary built with GEOS: TRUE 
 Loaded PROJ.4 runtime: Rel. 6.0.0, March 1st, 2019, [PJ_VERSION: 600]
 Path to PROJ.4 shared files: (autodetected)
 Linking to sp version: 1.3-1 
> 
> datpath <- "/scratch/tmp/llezamav/stack_extraction/"
> aoipath <- "/scratch/tmp/llezamav/aoi/"
> 
> # set month to look at
> time_range <- readRDS("/scratch/tmp/llezamav/time_range.rds")
> ym <- substring(time_range[[y]][[m]][[1]][[1]], 1, 7)
> 
> # get aux
> aux <- stack(paste0(datpath, "aux_stack_xy_swir67.tif"))
> #names(aux) <- c("dem", "slope", "aspect", "TWI", "soilraster", "landcoverres", "spatialblocks", "swir", "x", "y")
> # swir <- stack("D:/new_downscaling/SWIR/downloaded_scenes/2019-01/swir_tc_672019-01.tif")
> # auxnew <- stack(aux[[1:7]], swir, aux[[9:10]])
> # writeRaster(auxnew, paste0(datpath, "aux_stack_xy_swir67.tif"))
> names(aux) <- c("dem", "slope", "aspect", "TWI", "soilraster", "landcoverres", "spatialblocks", "swir6", "swir7", "x", "y")
> 
> # get aoi
> aoi <- readOGR(paste0(aoipath, "Levy_MDV.shp"))
OGR data source with driver: ESRI Shapefile 
Source: "/scratch/tmp/llezamav/aoi/Levy_MDV.shp", layer: "Levy_MDV"
with 1 features
It has 1 fields
Integer64 fields read as strings:  id 
> antaproj <- crs("+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m
+ +no_defs +ellps=WGS84 +towgs84=0,0,0")
> aoianta <- spTransform(aoi, antaproj)
> 
> 
> ################# THIS CAN GO AFTER I HAVE THE aux extraction FILE DONE ############################
> aoiaux <- spTransform(aoianta, crs(aux))
> 
> # extract aux
> auxdf <- as.data.frame(extract(aux, aoiaux))
> write.csv2(auxdf, paste0(datpath, "aux_df_swir_x_y.csv"), row.names=F)
> 
> 
> ################## get dyn stack for ym #############################################
> #tempdyn <- raster::stack(paste0("D:/new_downscaling/clean_data/", "new_L_MOD_hs_ia", ym, ".tif"))
> #tdnam <- read.csv("D:/new_downscaling/clean_data/names_sat_ia_hs_2019-01.csv")
> 
> tempdyn <- raster::stack(paste0(datpath, "new_L_MOD_hs_ia", ym, ".tif"))
> tdnam <- read.csv(paste0(datpath, "names_sat_ia_hs_2019-01.csv"))
> names(tempdyn) <- tdnam$x
> 
> ################## extract dyn stack  #############################################
> tempdyn <- stack(tempdyn, aux$x, aux$y)
> tmpdyndf <- as.data.frame(extract(tempdyn, aoianta))
> write.csv2(tmpdyndf, paste0(datpath, "tempdyn_new_", ym,"_df.csv"), row.names=F)
> 
> # tmpdyndf <- read.csv2(paste0(datpath, "tempdyn_new_", ym,"_df.csv"), header = T)
> test <- tmpdyndf[1:100,1]==seq(1:100)
> if(all(test==TRUE, na.rm = T) | is.na(all(test))==TRUE){ # if fits, kick out column, if all is NA or doesn't fit, don't 
+   tmpdyndf <- tmpdyndf[,2:ncol(tmpdyndf)] # eliminate rowname column if there's one
+ }
>  
> # ############ make checkfiles for aux and tempdyn extraction ##############
> write.csv2(tmpdyndf[1:500,], paste0(datpath, "tempdyndf_check.csv"), row.names=F)
> write.csv2(auxdf[1:500,], paste0(datpath, "auxdf_check.csv"), row.names=F)
> 
> ################### sort into useful file #########################
> auxdf <- read.csv2(paste0(datpath, "aux_df_swir_x_y.csv"))
> 
> new_package <- seq(1,(ncol(tmpdyndf)-2), by=4)
> end <- new_package+3
> 
> dfslices <- lapply(seq(new_package), function(i){
+   x <- tmpdyndf[,new_package[i]:end[i]] # get all columns for one date
+   xnam <- substring(names(x)[3], 4, 18) # get time info from hs/ia
+   x$time <- xnam # add time as row
+   x$xd <- tmpdyndf$x
+   x$yd <- tmpdyndf$y
+   x$id <- seq(1:nrow(x)) # as pixel ID for tempdyn
+   x <- cbind(x, auxdf) # add tempdyn for one date + aux together
+   names(x) <- c("Landsat", "Modis", "ia", "hs", "time", "xd", "yd", "id","dem", "slope", "aspect",
+                 "TWI", "soilraster", "landcoverres", "spatialblocks", "swir6", "swir7", "xa", "ya")
+   x
+ })
> 
> tddf <- do.call(rbind,dfslices)
> 
> ################### get complete cases ##################################
> 
> #write.csv2(tddf, paste0(datpath, "extr_comp_",ym, ".csv"), row.names = F)
> #tddf <- read.csv2(paste0(datpath, "extr_comp_",ym, ".csv"), header=T)
> 
> tddfcc$Modis[tddfcc$Modis <= -100] <- NA
Error in tddfcc$Modis[tddfcc$Modis <= -100] <- NA : 
  object 'tddfcc' not found
Execution halted

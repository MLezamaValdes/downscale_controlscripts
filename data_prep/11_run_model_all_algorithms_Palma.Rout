
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> y=1
> m=1
> 
> time_range <- readRDS("/scratch/tmp/llezamav/time_range.rds")
> ym <- substring(time_range[[y]][[m]][[1]][[1]], 1, 7)
> `%notin%` <- Negate(`%in%`)
> 
> #outpath <- "D:/new_downscaling/modelling/"
> outpath <- "/scratch/tmp/llezamav/modelling/"
> #expath <- "D:/new_downscaling/extraction/"
> expath <- "/scratch/tmp/llezamav/stack_extraction/"
> 
> 
> # install.packages("/home/l/llezamav/R/kernlab_0.9-29.tar.gz", repos = NULL,
> #                  lib="/home/l/llezamav/R/")
> # install.packages("/home/l/llezamav/R/pls_2.7-3.tar.gz", repos = NULL,
> #                  lib="/home/l/llezamav/R/")
> # install.packages("/home/l/llezamav/R/Cubist_0.2.2.tar.gz", repos = NULL,
> #                  lib="/home/l/llezamav/R/")
> # install.packages("/home/l/llezamav/R/gbm_2.1.5.tar.gz", repos = NULL,
> #                  lib="/home/l/llezamav/R/")
> install.packages("/home/l/llezamav/R/caret_6.0-85.tar.gz", repos = NULL,
+                  lib="/home/l/llezamav/R/")
* installing *source* package ‘caret’ ...
** package ‘caret’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
gcc -I"/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/R/3.6.0/lib64/R/include" -DNDEBUG   -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCC/8.2.0-2.31.1/OpenBLAS/0.3.5/include -I/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/ScaLAPACK/2.0.2-OpenBLAS-0.3.5/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/X11/20190311/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/Mesa/19.0.1/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libGLU/9.0.0/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/cairo/1.16.0/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libreadline/8.0/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ncurses/6.1/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/bzip2/1.0.6/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/XZ/5.2.4/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/zlib/1.2.11/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/SQLite/3.27.2/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/PCRE/8.43/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libpng/1.6.36/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libjpeg-turbo/2.0.2/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/LibTIFF/4.0.10/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Core/Java/11.0.2/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/Tk/8.6.9/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/cURL/7.63.0/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libxml2/2.9.8/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/GMP/6.1.2/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/NLopt/2.6.1/include -I/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/FFTW/3.3.8/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libsndfile/1.0.28/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ICU/64.2/include -I/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/HDF5/1.10.5/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/UDUNITS/2.2.26/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCC/8.2.0-2.31.1/GSL/2.5/include -I/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ImageMagick/7.0.8-46/include  -fpic  -O2 -ftree-vectorize -march=native -fno-math-errno  -c caret.c -o caret.o
gcc -shared -L/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/R/3.6.0/lib64/R/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Core/GCCcore/8.2.0/lib64 -L/Applic.HPC/Easybuild/skylake/2019a/software/Core/GCCcore/8.2.0/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCC/8.2.0-2.31.1/OpenBLAS/0.3.5/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/ScaLAPACK/2.0.2-OpenBLAS-0.3.5/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/X11/20190311/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/Mesa/19.0.1/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libGLU/9.0.0/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/cairo/1.16.0/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libreadline/8.0/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ncurses/6.1/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/bzip2/1.0.6/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/XZ/5.2.4/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/zlib/1.2.11/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/SQLite/3.27.2/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/PCRE/8.43/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libpng/1.6.36/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libjpeg-turbo/2.0.2/lib64 -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/LibTIFF/4.0.10/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Core/Java/11.0.2/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/Tk/8.6.9/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/cURL/7.63.0/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libxml2/2.9.8/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/GMP/6.1.2/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/NLopt/2.6.1/lib64 -L/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/FFTW/3.3.8/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/libsndfile/1.0.28/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ICU/64.2/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/HDF5/1.10.5/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/UDUNITS/2.2.26/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCC/8.2.0-2.31.1/GSL/2.5/lib -L/Applic.HPC/Easybuild/skylake/2019a/software/Compiler/GCCcore/8.2.0/ImageMagick/7.0.8-46/lib -o caret.so caret.o -L/Applic.HPC/Easybuild/skylake/2019a/software/MPI/GCC/8.2.0-2.31.1/OpenMPI/3.1.3/R/3.6.0/lib64/R/lib -lR
installing to /home/l/llezamav/R/00LOCK-caret/00new/caret/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (caret)
> install.packages("/home/l/llezamav/R/CAST_0.4.3.tar.gz", repos = NULL,
+                  lib="/home/l/llezamav/R/")
* installing *source* package ‘CAST’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (CAST)
> library(CAST,lib.loc="/home/l/llezamav/R/")
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
> library(caret,lib.loc="/home/l/llezamav/R/")
Loading required package: lattice
Loading required package: ggplot2
> library(gbm,lib.loc="/home/l/llezamav/R/")
Loaded gbm 2.1.5
> library(Cubist,lib.loc="/home/l/llezamav/R/")
> library(pls,lib.loc="/home/l/llezamav/R/")

Attaching package: ‘pls’

The following object is masked from ‘package:caret’:

    R2

The following object is masked from ‘package:stats’:

    loadings

> library(kernlab,lib.loc="/home/l/llezamav/R/")

Attaching package: ‘kernlab’

The following object is masked from ‘package:ggplot2’:

    alpha

> library(parallel)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> 
> ######################################### Look up train and test #################################################
> 
> # # for now just a simulation with random samples
> # testsites <- c(26, 63, 43, 12, 35, 40, 31, 79,  5,  2, 60, 11)
> # 
> # datpath <- "D:/new_downscaling/extraction/"
> # 
> # #test <- read.csv2(paste0(datpath, "test_ds_", ym, ".csv"))
> # #train <- read.csv2(paste0(datpath, "train_DI_", ym, ".csv"))
> # 
> # train <- readRDS(paste0(datpath, "train_DI_3.5_", ym, ".rds"))
> # 
> # #ds <- read.csv2(paste0(datpath, "pott3_new_", ym, ".csv"))
> # 
> # test <- subset(ds, ds$spatialblocks %in% testsites)
> # train <- subset(ds, ds$spatialblocks %notin% testsites)
> 
> 
> ######################################### RUN MODEL #################################################
> train <- readRDS(paste0(expath, "train_DI__2019-01.rds"))
> 
> ### just for testing ###############
> n <- 15000
> 
> # only if subset
> trainsubset <- train[sample(nrow(train),n), ]
> saveRDS(trainsubset, paste0(outpath, "train_", ym, "_subset_", n, ".rds"))
> train <- trainsubset 
> 
> testsubset <- readRDS(paste0(expath, "test_ds_2019-01.rds"))
> 
> #################
> 
> kval <- min(length(unique(train$time_num)), length(unique(train$spatialblocks)))
> 
> # split training cuarter into various blocks for cv during training
> foldids <- CreateSpacetimeFolds(train, spacevar="spatialblocks", timevar = "time_num",
+                                 k=kval,seed=100)
> 
> (trainlength <- sapply(seq(foldids$indexOut), function(i){
+   length(foldids$index[[i]])
+ }))
[1] 10818 12497  9035 11519 11534 12571 11086 12446
> 
> set.seed(100)
> 
> metric <- "RMSE" # Selection of variables made by either Rsquared or RMSE
> # gbm didn't work
> methods <- c("rf",
+              "lm",
+              "pls", # Partial Least Squares
+              "nnet",
+              "cubist", 
+              "svmLinear" # sampes >> features -> AI@WWU: use linear kernel
+              )
> withinSE <- FALSE # favour models with less variables or not?
> response <- train$Landsat
> predictors <- train[,c("Modis","ia", "hs", "dem", 
+                              "slope", "aspect", "TWI", 
+                              "soilraster", "landcoverres", 
+                              "swir6", "swir7")]
> 
> for (i in 1:length(methods)){
+   
+   tctrl <- trainControl(method="cv", 
+                         savePredictions = TRUE,
+                         returnResamp = "all",
+                         verboseIter=TRUE,
+                         index=foldids$index,
+                         indexOut=foldids$indexOut)
+   
+   
+   method <- methods[i]
+   print(method)
+   tuneLength <- 2
+   tuneGrid <- NULL
+   # if (method=="gbm"){
+   #   predictors <- data.frame(scale(train[,c("Modis","ia", "hs", "dem", 
+   #                          "slope", "aspect", "TWI", 
+   #                          "soilraster", 
+   #                          "swir6", "swir7")]))
+   #   
+   #   tctrl <- trainControl(method="repeatedcv", 
+   #                         number=kval,
+   #                         repeats=kval,
+   #                         savePredictions = TRUE,
+   #                         returnResamp = "all",
+   #                         verboseIter=TRUE,
+   #                         index=foldids$index,
+   #                         indexOut=foldids$indexOut)
+   #   
+   # }
+   if (method=="rf"){
+     #   tuneLength <- 1
+     tuneGrid <- expand.grid(mtry = 2) # Create A Data Frame From All Combinations Of Factor Variables, 
+     # mtry: Number of variables randomly sampled as candidates at each split
+   }
+   
+   if (method=="pls"){
+     predictors <- data.frame(scale(predictors))
+     tuneLength <- 10
+   }
+   if (method=="nnet"){
+     #   tuneLength <- 1
+     predictors <- data.frame(scale(predictors))
+     tuneGrid <- expand.grid(size = seq(2,ncol(predictors),2),
+                             decay = seq(0,0.1,0.025))
+   }
+   if (method=="cubist"){
+     tuneGrid <- expand.grid(committees=seq(1,50,5), neighbors=0:9)
+     
+   }
+   
+   if (method=="svmLinear"){ # C controls how large the support vectors, i.e. margins are
+     #   tuneLength <- 1
+     tuneGrid <- expand.grid(C= 2^c(0:3))
+   }
+   cores <- detectCores()
+   cl <- makeCluster(cores-3)
+   registerDoParallel(cl)
+   ffs_model <- ffs(predictors,
+                    response,
+                    metric=metric,
+                    withinSE = withinSE,
+                    method = method,
+                    importance =TRUE,
+                    tuneLength = tuneLength,
+                    tuneGrid = tuneGrid,
+                    trControl = tctrl,
+                    trace = FALSE, #relevant for nnet
+                    linout = TRUE) #relevant for nnet
+ 
+   save(ffs_model,file=paste0(outpath,"ffs_model_",method,"_", n, ".RData"))
+ 
+   stopCluster(cl)
+   
+ }
[1] "rf"
[1] "model using Modis,ia will be trained now..."
Error in { : tError in { : task 1 failed - "replacement has 1 row, data has 0"
Calls: ffs ... train.default -> nominalTrainWorkflow -> %op% -> <Anonymous>
Execution halted
